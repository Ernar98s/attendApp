{"remainingRequest":"C:\\Users\\Omen\\Downloads\\Telegram Desktop\\project\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\Omen\\Downloads\\Telegram Desktop\\project\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Omen\\Downloads\\Telegram Desktop\\project\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Omen\\Downloads\\Telegram Desktop\\project\\src\\views\\widgets\\WidgetsDropdown.vue?vue&type=template&id=30864194&","dependencies":[{"path":"C:\\Users\\Omen\\Downloads\\Telegram Desktop\\project\\src\\views\\widgets\\WidgetsDropdown.vue","mtime":1620581063667},{"path":"C:\\Users\\Omen\\Downloads\\Telegram Desktop\\project\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Omen\\Downloads\\Telegram Desktop\\project\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\Omen\\Downloads\\Telegram Desktop\\project\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Omen\\Downloads\\Telegram Desktop\\project\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}